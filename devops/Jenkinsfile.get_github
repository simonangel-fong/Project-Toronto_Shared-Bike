pipeline {
    agent any

    environment {
        BASE_DIR = "/project"
        GITHUB_DIR = "${BASE_DIR}/github"
        DPUMP_DIR = "${BASE_DIR}/dpump"
        ORADATA_DIR = "${BASE_DIR}/oradata"
        ORBACKUP_DIR = "${BASE_DIR}/orabackup"
        CONFIG_DIR = "${BASE_DIR}/config"
        APP_ADMIN = "appadmin"
        APP_GROUP = "appgroup"
        GIT_REPO_URL = "https://github.com/simonangel-fong/Project-Toronto_Shared-Bike.git"
        GIT_BRANCH = "feature-devops"
    }

    stages {
        stage('Clone or Pull Repository') {
            steps {
                script {
                    // Check if GITHUB_DIR exists and is empty
                    if (fileExistsAndNotEmpty(GITHUB_DIR)) {
                        echo "========================================================"
                        echo "Pulling GitHub repository..."
                        echo "========================================================"
                        // Directory exists and is not empty, force pull the repository
                        sh "sudo git -C ${GITHUB_DIR} fetch origin"
                        sh "sudo git -C ${GITHUB_DIR} reset --hard origin/${GIT_BRANCH}"
                        sh "sudo git -C ${GITHUB_DIR} clean -df"
                        sh "sudo git -C ${GITHUB_DIR} checkout ${GIT_BRANCH}"
                        sh "sudo git -C ${GITHUB_DIR} pull"
                    } else {
                        echo "========================================================"
                        echo "Cloning GitHub repository..."
                        echo "========================================================"
                        // Clone the repository
                        sh "sudo git clone --branch ${GIT_BRANCH} ${GIT_REPO_URL} ${GITHUB_DIR}"
                    }
                }
            }
        }

        stage('Configure Git') {
            steps {
                script {
                    // Configure Git settings
                    sh "git config --global --add safe.directory ${GITHUB_DIR}"
                }
            }
        }

        stage('Copy Configuration Files') {
            steps {
                script {
                    echo "========================================================"
                    echo "Copy conf and env files"
                    echo "========================================================"
                    // Copy configuration files to BASE_DIR
                    sh "sudo cp -rv /root/config/ ${BASE_DIR}"
                    // Confirm copied files
                    sh "ls ${CONFIG_DIR}"
                }
            }
        }

        stage('Set Ownership and Permissions') {
            steps {
                script {
                    echo "========================================================"
                    echo "Set ownership..."
                    echo "========================================================"
                    // Set ownership for admin
                    sh "sudo chown ${APP_ADMIN}:${APP_GROUP} -Rv ${BASE_DIR}"
                    // Set ownership for oracle
                    sh "sudo chown 54321:54321 -Rv ${DPUMP_DIR} ${ORADATA_DIR} ${ORBACKUP_DIR} ${GITHUB_DIR}/oracledb/scripts"
                    // Set shell script permissions
                    sh "sudo find ${GITHUB_DIR} -type f -name '*.sh' -exec chmod -v 755 {} +"
                    // Set permissions for directories and files
                    sh "sudo find ${BASE_DIR} -type d -exec sudo chmod -v 755 {} +"
                    sh "sudo find ${BASE_DIR} -type f -name '*.conf' -exec sudo chmod -v 666 {} +"
                    sh "sudo find ${BASE_DIR} -type f -name '*.env' -exec sudo chmod -v 666 {} +"
                }
            }
        }
    }
}

def fileExistsAndNotEmpty(directory) {
    return sh(script: "[ -d ${directory} ] && [ \$(ls -A ${directory}) ]", returnStatus: true) == 0
}
